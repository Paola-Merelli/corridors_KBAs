library(sf)
library(rgdal)
library(raster)
library(dplyr)
library(tidyverse)
library(terra)
library(ggplot2)
library(scales)
#setwd("/media/r_projects/paola.merelli2/assegno_prin")

wdpa_ita1 <- vect("prova_ita_iba/1/WDPA_WDOECM_Aug2024_Public_ITA_shp-polygons.shp")
wdpa_ita2 <- vect("prova_ita_iba/2/WDPA_WDOECM_Aug2024_Public_ITA_shp-polygons.shp")
wdpa_ita3 <- vect("prova_ita_iba/3/WDPA_WDOECM_Aug2024_Public_ITA_shp-polygons.shp")
unique(wdpa_ita1$ISO3)
unique(wdpa_ita2$ISO3)
unique(wdpa_ita3$ISO3)
wdpa_ita1 <- wdpa_ita1[wdpa_ita1$ISO3 == "ITA", ]


wdpa_ita <- rbind(wdpa_ita1, wdpa_ita2, wdpa_ita3)
print(wdpa_ita)
wdpa_ita <- makeValid(wdpa_ita)
#wdpa_ita <- st_simplify(wdpa_ita, dTolerance = 0.001, preserveTopology = T)

#tolgo tutte le aree marine protette
wdpa_ita <- wdpa_ita[wdpa_ita$MARINE != 2, ] # 0 sono strettamente terrestri, 1 sono coastal
unique(wdpa_ita$MARINE)

wdpa_ita <- project(wdpa_ita, "EPSG:3035")
#writeVector(wdpa_ita, "prova_ita_iba/produced_layers/wdpa_ita.shp")


ita <- vect("prova_ita_iba/italian_territory.shp") #trasformato in wgs in qgis
ita <- makeValid(ita)
ita <- project(ita, "EPSG:3035")
print(ita)

#plot(ita, col = "white", main = "Italian PAs")
#plot(wdpa_ita, col = "black", add = TRUE)
#writeVector(ita, "prova_ita_iba/produced_layers/ita.shp")

np_ita <- wdpa_ita[grepl("National Park", wdpa_ita$DESIG_ENG), ]
#plot(ita, col = "white", main = "Italian PAs")
#plot(wdpa_ita, col = "black", add = TRUE)
#plot(np_ita, col = "green", add = TRUE)
#writeVector(np_ita, "prova_ita_iba/produced_layers/np_ita.shp")

iba_ita <- vect("prova_ita_iba/IBA_original.shp")
iba_ita <- makeValid(iba_ita)
iba_ita <- project(iba_ita, "EPSG:3035")
iba_ita <- iba_ita[!grepl("M$", iba_ita$CODICE_IBA), ]  #tolgo aree marine
unique(iba_ita$CODICE_IBA)
iba_ita <- erase(iba_ita, np_ita)

#plot(ita, col = "white", main = "Italian PAs")
#plot(iba_ita, col = "black", add = TRUE)
#plot(np_ita, col = 'green', add = TRUE)
#writeVector(iba_ita, "prova_ita_iba/produced_layers/iba_ita.shp")



############### da rifare. intanto carico da qgis
oth_pa_ita <- vect("prova_ita_iba/oth_pa_ita.shp")
nopa_ita <- vect("prova_ita_iba/nopa_ita.shp")


###################################################################
# Ottimizza la geometria per ridurre il carico computazionale
#np_ita_simplified <- simplifyGeom(np_ita, tolerance = 0.001)
#iba_ita_simplified <- simplifyGeom(iba_ita, tolerance = 0.001)

# Operazioni di unione ed erase su geometrie semplificate
#tryCatch({
  #oth_pa_ita <- erase(wdpa_ita, union(np_ita_simplified, iba_ita_simplified))
  #nopa_ita <- erase(ita, union(wdpa_ita, iba_ita_simplified))
#}, error = function(e) {
  #print(paste("Error encountered:", e))
#})


#oth_pa_ita <- erase(wdpa_ita, union(np_ita, iba_ita))
oth_pa_ita <- makeValid(oth_pa_ita)

#nopa_ita <- erase(ita, union(wdpa_ita, iba_ita))
nopa_ita <- makeValid(nopa_ita)

#plot(st_geometry(ita), col = "white", main = "Layer 1 e Layer 2")
#plot(st_geometry(nopa_ita), col = "lightblue", add = TRUE)
#plot(st_geometry(oth_pa_ita), col = 'green', add = TRUE)
#dev.off()

#############################################################################

##### aggiungo colonna valori di resistenza in base al tipo di area protetta

np_ita$resistance <- 0 
oth_pa_ita$resistance <- 100
nopa_ita$resistance <- 200

rli_ita <- read.csv("prova_ita_iba/RLI.csv")

#aggiungo colonna con valori rli
rli_ita <- rli_ita %>% rename(CODICE_IBA = IBA)
iba_ita <- merge(iba_ita, rli_ita[, c("CODICE_IBA", "RLI")], by = "CODICE_IBA", all.x = TRUE)
iba_ita$RLI[is.na(iba_ita$RLI)] <- 1
unique(iba_ita$RLI)

####trasformo in valori rli in resistenza e aggiungo la colonna
# Definisci i limiti delle scale originale e nuova
min_rli <- 1
max_rli <- 20
min_scale <- 1
max_scale <- 60

# Funzione per trasformare i valori RLI
transform_rli <- function(rli, min_rli, max_rli, min_scale, max_scale) {
  return(max_scale - ((rli - min_rli) / (max_rli - min_rli)) * (max_scale - min_scale) + min_scale)
}

# Applica la trasformazione ai valori RLI nella colonna esistente
iba_ita$resistance <- transform_rli(iba_ita$RLI, min_rli, max_rli, min_scale, max_scale)


all_layers_ita <- rbind(iba_ita, np_ita, oth_pa_ita, nopa_ita)
all_layers_ita <- makeValid(all_layers_ita)
#writeVector(all_layers_ita, "prova_ita_iba/produced_layers/all_layers_pa_ita.shp")

#plot(st_geometry(all_layers_ita), col = 'red')
#dev.off()

summary(all_layers_ita$resistance)
if (any(is.na(all_layers_ita$resistance))) {
  print("NA values detected in resistance column.")
  all_layers_ita$resistance[is.na(all_layers_ita$resistance)] <- 1  # Or another default value
}

r2 <- rast(ext(ita), resolution = c(100, 100))
crs(r2) <- crs(ita) 

resistance_pa_ita <- rasterize(all_layers_ita, r2, field = "resistance")
print(resistance_pa_ita)

# Visualizzazione con ggplot2
resistance_pa_df_ita <- as.data.frame(resistance_pa_ita, xy = TRUE)

res_pa <- ggplot() +
  geom_tile(data = resistance_pa_df_ita, aes(x = x, y = y, fill = resistance)) +
  scale_fill_viridis_c(alpha = 1, begin = 0, end = 1) +  # Scala di colori per la distanza
  theme_minimal() +
  labs(title = "Protected Areas (Italy)", fill = "Resistance") +
  coord_sf() +
  theme(axis.title.x = element_blank(), axis.title.y = element_blank())

writeRaster(resistance_pa_ita, "prova_ita_iba/produced_layers/resistance_pa_ita.tiff", overwrite=TRUE)
ggsave("prova_ita_iba/produced_layers/res_pa.png", plot = res_pa)


############################################################# AOH layer #############################################################

AOH_birds_ita <- rast("prova_ita_iba/AOH_birds_ita.tif")
crs(AOH_birds_ita) <- "EPSG:3035"
print(AOH_birds_ita) #res AOH_birds_ita 92.78040 92.77625

AOH_birds_ita_new <- rast(AOH_birds_ita)
res(AOH_birds_ita_new) <- c(100, 100)  # Impostare la nuova risoluzione
ext(AOH_birds_ita_new) <- ext(AOH_birds_ita)
resistance_AOH_birds_ita <- resample(AOH_birds_ita, AOH_birds_ita_new, method = "bilinear")  

min_AOH <- min(values(resistance_AOH_birds_ita), na.rm = TRUE)  
max_AOH <- max(values(resistance_AOH_birds_ita), na.rm = TRUE)  
min_scale2 <- 0
max_scale2 <- 200

# Funzione per riscalare AOH in resistenza
transform_AOH <- function(AOH, min_AOH, max_AOH, min_resist, max_resist) {
  return(((max_AOH - AOH) / (max_AOH - min_AOH)) * (max_resist - min_resist) + min_resist)
}

# Applica la funzione per trasformare i valori di AOH in resistenza inversa
resistance_AOH_birds_ita$resistance <- transform_AOH(values(resistance_AOH_birds_ita), 
                                                     min_AOH, max_AOH, 
                                                     min_scale2, max_scale2)

print(resistance_AOH_birds_ita)
resistance_AOH_birds_ita <- resistance_AOH_birds_ita[["resistance"]]

resistance_AOH_birds_ita <- resample(resistance_AOH_birds_ita, resistance_pa_ita)


# Visualizzazione con ggplot2
resistance_AOH_birds_df_ita <- as.data.frame(resistance_AOH_birds_ita, xy = TRUE)

res_AOH <- ggplot() +
  geom_tile(data = resistance_AOH_birds_df_ita, aes(x = x, y = y, fill = resistance)) +
  scale_fill_viridis_c(alpha = 1, begin = 0, end = 1) +
  theme_minimal() +
  labs(title = "AOH_birds", fill = "Resistance") +
  coord_sf(crs = st_crs(3035), expand = FALSE) +
  theme(axis.title.x = element_blank(), axis.title.y = element_blank())

#ggsave("prova_ita_iba/produced_layers/res_AOH.png", plot = res_AOH)
#writeRaster(resistance_AOH_birds_ita, "prova_ita_iba/produced_layers/resistance_AOH_birds_ita.tiff", overwrite = T)


############################################################# distance layer #################################################################

ita_pa <- rbind(iba_ita, np_ita, oth_pa_ita)
crs(ita_pa) <- "EPSG:3035"

ita_raster <- rasterize(ita, r2, field = 1)
crs(ita_raster) <- "EPSG:3035"
ita_pa_raster <- rasterize(ita_pa, r2, field = 1)
crs(ita_pa_raster) <- "EPSG:3035"

resistance_d_pa_ita <- distance(ita_pa_raster, unit = "km")
resistance_d_pa_ita <- mask(resistance_d_pa_ita, ita_raster)
crs(resistance_dpa_ita) <- "EPSG:3035"
print(resistance_d_pa_ita)


# Define the min and max values for the distance and resistance scales
min_d <- min(values(resistance_d_pa_ita), na.rm = TRUE)  # Assuming min distance is 0
max_d <- max(values(resistance_d_pa_ita), na.rm = TRUE)  # Max distance from your data
min_scale2 <- 0
max_scale2 <- 200

# Function to transform distance to resistance
transform_distance <- function(distance, min_dist, max_dist, min_resist, max_resist) {
  return(((distance - min_dist) / (max_dist - min_dist)) * (max_resist - min_resist) + min_resist)
}

# Apply the transformation to create the resistance layer
resistance_d_pa_ita$resistance <- transform_distance(values(resistance_d_pa_ita), 
                                                      min_d, max_d, 
                                                      min_scale2, max_scale2)

print(resistance_d_pa_ita)
resistance_d_pa_ita <- resistance_d_pa_ita[["resistance"]]

# Visualizzazione con ggplot2
resistance_d_pa_df_ita <- as.data.frame(resistance_d_pa_ita, xy = TRUE)

res_d_pa <- ggplot() +
  geom_tile(data = resistance_d_pa_df_ita, aes(x = x, y = y, fill = resistance)) +
  scale_fill_viridis_c(alpha = 1, begin = 0, end = 1) +  
  geom_sf(data = st_as_sf(ita_pa), color = "black", fill = "white", size = 0.5) +  # Linee delle aree protette
  theme_minimal() +
  labs(title = "Distance from Protected Areas (Italy)", fill = "Resistance") +
  coord_sf(crs = st_crs(3035), expand = FALSE) +
  theme(axis.title.x = element_blank(), axis.title.y = element_blank())

#ggsave("prova_ita_iba/produced_layers/res_d_pa.png", plot = res_d_pa)
#writeRaster(resistance_d_pa_ita, "prova_ita_iba/produced_layers/resistance_d_pa_ita.tiff", overwrite = T)
#writeRaster(ita_raster, "prova_ita_iba/produced_layers/ita_rast.tiff", overwrite = T)

#####################################################################################
#resistance_pa_ita <- rast("prova_ita_iba/produced_layers/resistance_pa_ita.tiff")
#resistance_d_pa_ita <- rast("prova_ita_iba/produced_layers/resistance_d_pa_ita.tiff")
#resistance_AOH_birds_ita <- rast("prova_ita_iba/produced_layers/resistance_AOH_birds_ita.tiff")

final_resistance_ita <- resistance_pa_ita + resistance_AOH_birds_ita + resistance_d_pa_ita

if (is.null(resistance_pa_ita) || !inherits(resistance_pa_ita, "SpatRaster")) {
  stop("Error: resistance_pa_ita is either NULL or not a valid SpatRaster object.")
}
if (is.null(resistance_AOH_birds_ita) || !inherits(resistance_lc_ita, "SpatRaster")) {
  stop("Error: resistance_lc_ita is either NULL or not a valid SpatRaster object.")
}
if (is.null(resistance_d_pa_ita) || !inherits(resistance_d_pa_ita, "SpatRaster")) {
  stop("Error: resistance_d_pa_ita is either NULL or not a valid SpatRaster object.")
}

final_resistance_ita_df <- as.data.frame(final_resistance_ita, xy = T)


res_final <- ggplot() +
  geom_tile(data = final_resistance_ita_df, aes(x = x, y = y, fill = resistance)) +
  scale_fill_viridis_c(alpha = 1, begin = 0, end = 1) +  # Scala di colori per la distanza
  geom_sf(data = st_as_sf(np_ita), color = "black", size = 0.5) +  # Linee delle aree protette
  theme_minimal() +
  labs(title = "Resistance layer (Italy)", fill = "Resistance") +
  coord_sf() +
  theme(axis.title.x = element_blank(), axis.title.y = element_blank())

#writeRaster(final_resistance_ita, "prova_ita_iba/produced_layers/final_resistance_ita.tiff", overwrite = T)
#ggsave("prova_ita_iba/produced_layers/res_final.png", plot = res_final, width = 4.34, height = 3.77)

