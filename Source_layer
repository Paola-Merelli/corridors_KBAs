##### National parks + protected areas with highest RLI, polygon based calculation from wdpa-noNP
## prova italy



#setwd("/media/r_projects/paola.merelli2/assegno_prin/IBAs/")

library(tidyverse)
library(terra)
library(sf)
library(raster)
library(dplyr)
library(ggplot2)

ita <- vect(".shp")
ita_wgs <- project(ita, "EPSG:4326")

file_raster <- list.files("path cartella file AOH ita", pattern = "tif", full.names = TRUE)
print(paste("N raster trovati:", length(file_raster)))

rast_list <- lapply(file_raster, function(file) {
  r <- rast(file)
  names(r) <- tools::file_path_sans_ext(basename(file))  # Assegna il nome del file come nome del raster
  return(r)
})


# Crea uno stack
stack_ita <- rast(rast_list)

# Plotta lo stack e il vettore dell'italia
plot(stack_ita)


# Croppa e maschera lo stack con l'estensione dell'italia
stack_ita <- crop(stack_eu, ita_wgs) 
stack_ita <- mask(stack_ita, ita_wgs)

plot(stack_ita)
plot(stack_ita$)


### unisci migratory R N B sites per la stessa specie
stack_ita_final <- 
################

# Sostituisci NA con 0 (se necessario)
stack_ita_final <- app(stack_ita, fun = function(x) { x[is.na(x)] <- 0; return(x) })

# Verifica i nomi degli strati
print(names(stack_ita_final))

#writeRaster(stack_ita_final, "path")

wdpa_ita <- vect("IT/data_input/wdpa_ita_cleaned/ITA_wdpa.shp")
print(wdpa_ita)
unique(wdpa_ita$DESIG_E)

np_ita <- wdpa_ita[grepl("National Park", wdpa_ita$DESIG_E), ]
print(np_ita)

other_areas_ita <- wdpa_ita[!grepl("National Park", wdpa_ita$DESIG_E), ]
print(other_areas)

#other_areas_wgs <- project(other_areas, "EPSG:4326")
#er <- project(er, crs(other_areas_wgs))
ita <- makeValid(ita)
other_areas_ita <- makeValid(other_areas_ita)

extracted <- extract(stack_er, other_areas_ita, touches = TRUE)

num_protected_areas <- nrow(other_areas_ita)
num_species <- nlyr(stack_ita_final)
community_matrix <- matrix(0, nrow = num_protected_areas, ncol = num_species)

# Imposta i nomi delle righe e delle colonne
rownames(community_matrix) <- other_areas_ita$NAME # Sostituisci con il campo identificativo delle aree
colnames(community_matrix) <- names(stack_ita_final)    # Nomi delle specie (derivati dai raster)

# Popola la matrice
for (i in unique(extracted$ID)) {
  area_data <- extracted[extracted$ID == i, -1]  # Escludi la colonna ID
  community_matrix[i, ] <- colSums(area_data, na.rm = TRUE) > 0
}

#write.csv(community_matrix, "path", row.names = TRUE)
#community_matrix <- read.csv("path")

Birds_list_global <- read.csv("prova_ER/Birds_list_AOH.csv")

sp_list <- as.data.frame(names(stack_ita_final), stringsAsFactors = FALSE)
colnames(sp_list) <- "Species"  # Dai un nome alla colonna per facilitarne l'uso

sp_list$AOH_name <- sub("_ita$", "", sp_list$Species)

merged_df <- merge(sp_list, Birds_list_global[, c("AOH_name", "F2019_Iucn_Red_List_Category")], 
                   by = "AOH_name", 
                   all.x = TRUE)

colnames(merged_df)[colnames(merged_df) == "F2019_Iucn_Red_List_Category"] <- "Valore_IUCN"

aggiungi_pesi_IUCN <- function(df) {
  iucn_weights <- data.frame(
    Valore_IUCN = c("LC", "NT", "VU", "EN", "CR", "EW", "EX"),
    peso = c(0, 1, 2, 3, 4, 5, 6)
  )
  df_weights <- df %>%
    left_join(iucn_weights, by = "Valore_IUCN")
  
  return(df_weights)
}

merged_df <- aggiungi_pesi_IUCN(merged_df)

species_in_matrix <- colnames(community_matrix)
weights <- merged_df$peso[match(species_in_matrix, merged_df$Species)]
community_matrix <- rbind(community_matrix, weights)



# Calcola l'indice per ogni area protetta
indices <- apply(community_matrix, 1, function(row) {
  present_species <- row == 1  # Identifica le specie presenti (colonne con valore 1)
  sum_weights <- sum(weights[present_species])  # Somma dei pesi delle specie presenti
  num_species <- sum(present_species)  # Numero di specie presenti
  return(sum_weights + num_species)  # Calcola l'indice
})

# Aggiungi l'indice come colonna a un nuovo dataframe
RLI_ita <- data.frame(
  NAME = rownames(community_matrix),
  RLI = indices
)

RLI_ita <- merge(RLI_er, other_areas_er[, c("NAME", "REP_ARE")], 
                  by = "NAME", 
                  all.x = TRUE)  # all.x = TRUE per mantenere tutte le righe di df_areas


summary(RLI_ita$Index)
quantile(RLI_ita$Index, probs = 0.9)
ita_nodes <- RLI_ita[RLI_ita$Index > 9,]
ita_nodes$ID <- 1:nrow(ita_nodes)

ita_nodes <- ita_nodes %>%
  rename(NAME = Area)

ita_nodes <- merge(ita_nodes, other_areas_ita[, c("NAME", "REP_ARE")], 
                           by = "NAME", 
                           all.x = TRUE)  # all.x = TRUE per mantenere tutte le righe di df_areas

ita_nodes_vect <- other_areas_ita[other_areas_ita$NAME %in% ita_nodes$Area, ]

ita_sf <- st_as_sf(ita)
ita_nodes_sf <- st_as_sf(ita_nodes_vect)

# Plot con ggplot
ggplot() +
  geom_sf(data = ita_sf, aes(fill = "ita"), color = "black", alpha = 0.5) +  # Aggiungi il primo layer
  geom_sf(data = ita_nodes_sf, aes(fill = "ita_nodes_sf"), color = "black", shape = 16, size = 3) +  # Aggiungi il secondo layer
  scale_color_manual(values = c("ita_nodes_sf" = "black")) +  # Imposta il colore per i punti
  scale_fill_manual(values = c("ita" = "lightblue", "ita_nodes_sf" = "black")) +  # Colori di riempimento
  theme_minimal() +
  ggtitle(" Nodi Ita") +  # Aggiungi il titolo
  theme(legend.position = "none") 

write.csv(community_matrix, "prova_ER/community_matrix_pesiIUCN.csv", row.names = TRUE)
write.csv(RLI_ita, "prova_ER/RLI_PAs_er.csv", row.names = TRUE)
write.csv(ita_nodes, "prova_ER/er_nodes_90per.csv", row.names = T)

